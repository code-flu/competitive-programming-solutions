class UF {
  public UF(int n) {
    id = new int[n];
    for (int i = 0; i < n; ++i)
      id[i] = i;
  }

  public void union(int u, int v) {
    id[find(u)] = find(v);
  }

  public int find(int u) {
    return id[u] == u ? u : (id[u] = find(id[u]));
  }

  private int[] id;
}

class Solution {
  public int minMalwareSpread(int[][] graph, int[] initial) {
    final int n = graph.length;
    UF uf = new UF(n);
    int[] ufSize = new int[n];
    int[] malwareCount = new int[n];

    for (int i = 0; i < n; ++i)
      for (int j = i + 1; j < n; ++j)
        if (graph[i][j] == 1)
          uf.union(i, j);

    for (int i = 0; i < n; ++i)
      ++ufSize[uf.find(i)];

    for (final int i : initial)
      ++malwareCount[uf.find(i)];

    Arrays.sort(initial);

    int ans = initial[0];
    int maxUfSize = 0;

    // find the max union's malware if it only contains 1 malware
    for (final int i : initial) {
      final int id = uf.find(i);
      if (ufSize[id] > maxUfSize && malwareCount[id] == 1) {
        maxUfSize = ufSize[id];
        ans = i;
      }
    }

    return ans;
  }
}
